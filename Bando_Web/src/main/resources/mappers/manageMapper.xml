<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="manageMapper">

<!-- 재고 작성 -->
   <insert id="productinsert">
	   INSERT INTO TEST_ALLBOARD(PDTNUM, PRODUCT, PURCHASECOMP, REPOSIBILITY, PWEIGHT
	   							, PLENGTH, QUANTITY, PCHPRICE, PRICE, TAX, DIFFERENCE)
	                 VALUES( TEST_ALLBOARD_SEQ.NEXTVAL, #{product}, #{purchasecomp}, #{reposibility}, #{pweight}
	                 		, #{plength}, #{quantity}, #{pchprice}, #{price}, #{tax}, #{difference} )
   
   </insert>
   
<!-- 재고 조회 -->
   <select id="productlist" resultType="com.bando.dto.manageDTO">
	   SELECT PDTNUM, BUTDATE, PRODUCT, PURCHASECOMP, REPOSIBILITY, PWEIGHT
	   			, PLENGTH, QUANTITY, PCHPRICE, PRICE, TAX, DIFFERENCE
	   		FROM TEST_ALLBOARD
	        ORDER BY PDTNUM DESC  
   </select>
   
 <!-- 재고 수정 -->
   <update id="productupdate" parameterType="com.bando.dto.manageDTO">
	   UPDATE TEST_ALLBOARD
	   		SET PRODUCT = #{product},
	   			PURCHASECOMP = #{purchasecomp},
	   			REPOSIBILITY = #{reposibility},
	   			PWEIGHT = #{pweight},
	   			PLENGTH = #{plength},
	   			QUANTITY = #{quantity},
	   			PCHPRICE = #{pchprice},
	   			PRICE = #{price},
	   			TAX = #{tax},
	   			DIFFERENCE = #{difference}
	   			
	   WHERE PDTNUM = #{pdtnum}  
   </update>
   
<!-- 재고 삭제 -->
   <delete id="productdelete" parameterType="int">
	   DELETE 
			FROM TEST_ALLBOARD
		WHERE PDTNUM = #{pdtnum}  
	                 
   </delete>
   
   <!-- 총 단가, 총 매출, 총 내역 수 출력 -->
   <select id="saleslist" resultType="com.bando.dto.SalesDTO">
    	SELECT SUM(PCHPRICE) AS total_pchprice, 
           	   SUM(DIFFERENCE) AS total_difference,
           	   COUNT(*) AS total_cnt
    		FROM TEST_ALLBOARD
	</select>
   
   <!-- 구매처 회사 정보 작성 -->
   <insert id="purchasecompinsert">
	   INSERT INTO purchasecomp_table(purchase_id, purchase_company, adress, comp_number, email)
	                 VALUES( purchasecomp_table_SEQ.NEXTVAL, #{purchase_company}, #{adress}, #{comp_number}, #{email} )
   
   </insert>
   
<!-- 구매처 회사 정보 조회 -->
   <select id="purchasecomplist" resultType="com.bando.dto.PurchaseCompDTO">
	   SELECT purchase_id, purchase_company, adress, comp_number, email
	   		FROM purchasecomp_table
   </select>
   
<!-- 구매처 회사 매칭해 거래내역 추가 -->
<insert id="purchcomptradelist">
	   INSERT INTO purchase_table (purchase_pdtnum, purchase_id, product, pur_quantity, 
	   								purchase_price, pur_length, pur_weight, purchase_EAprice)
	   			VALUES ( clientcomp_table_SEQ.NEXTVAL, #{purchase_id}, #{product}, #{pur_quantity}, #{purchase_price}, #{pur_length}, #{pur_weight}, #{purchase_EAprice})
   </insert>
   
<!-- 구매처 회사 정보 조회 -->
   <select id="purchcompbyid" resultType="com.bando.dto.PurchaseCompDTO">
	   SELECT purchase_company, adress, comp_number, email
	   		FROM purchasecomp_table
	   		WHERE purchase_id = #{purchase_id}
   </select>
 
<!-- 구매 정보 조회 -->
   <select id="purchlistbyid" resultType="com.bando.dto.PurChasePdtDTO" parameterType="java.util.Map">
   		SELECT Product, 
		       purchase_date, 
		       pur_quantity, 
		       purchase_price, 
		       pur_length, 
		       pur_weight, 
		       purchase_pdtnum,
		       purchase_EAprice
		FROM (
      			SELECT Product, 
		               purchase_date, 
		               pur_quantity, 
		               purchase_price, 
		               pur_length, 
		               pur_weight, 
		               purchase_pdtnum,
		               purchase_EAprice,
		               ROW_NUMBER() OVER(ORDER BY purchase_pdtnum DESC) AS RNUM
		        FROM purchase_table
		        WHERE purchase_id = #{purchase_id}
     		  ) MP
			WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
			ORDER BY purchase_pdtnum DESC
   </select>
<!-- 게시물 총 갯수 -->
<select id="listCount" resultType="int">
	<![CDATA[
		SELECT COUNT(purchase_pdtnum)
		  FROM purchase_table
		 WHERE purchase_pdtnum > 0
	]]>
	</select>
   
<!-- 고객사 회사 정보 작성 -->
   <insert id="clientinsert">
	   INSERT INTO clientcomp_table(client_id, client_company, address, comp_number, email)
	                 VALUES( clientcomp_table_SEQ.NEXTVAL, #{client_company}, #{address}, #{comp_number}, #{email} )
   
   </insert>
   
<!-- 고객사 회사 정보 조회 -->
   <select id="clientlist" resultType="com.bando.dto.ClientDTO">
	   SELECT client_id, client_company, address, comp_number, email
	   		FROM clientcomp_table
   </select>
     
<!-- 고객사 기계 정보 작성 -->
   <insert id="machineadd">
	   INSERT INTO machine_table(machine_id, client_id, machine_name, machine_memo)
	                 VALUES( machine_table_SEQ.NEXTVAL, #{client_id}, #{machine_name}, #{machine_memo} )
   
   </insert>     
     

<!-- 매칭된 id값의 고객사 회사 정보 조회 -->
   <select id="clientbyid" resultType="com.bando.dto.ClientDTO">
	   SELECT client_id, client_company, address, comp_number, email
	   		FROM clientcomp_table
	   		WHERE client_id = #{client_id}
   </select>
   
<!-- 판매 정보 작성 -->
   <insert id="selladd">
	   INSERT INTO sell_product(resp_id, client_id, machine_id, responsibility, ph_number, sell_quantity, sell_length, sell_weight, sell_price, tax, sell_pdt, sell_EAprice, purchase_pdtnum )
	                 VALUES( resp_id.NEXTVAL, #{client_id}, #{machine_id}, #{responsibility}, #{ph_number}, #{sell_quantity}, #{sell_length}, #{sell_weight}, #{sell_price}, #{tax}, #{sell_pdt}, #{sell_EAprice}, #{purchase_pdtnum} )
   
   </insert>   
        
        
<!-- 매칭된 client_id값의 기계 정보 조회 -->
   <select id="machinebyid" resultType="com.bando.dto.MachineDTO">
	   SELECT machine_id, client_id, machine_name, machine_memo
	   		FROM machine_table
	   		WHERE client_id = #{client_id}
   </select>        
        
        
<!-- 매칭된 machine_id값의 판매 정보 조회 -->
   <select id="sellListbyid" resultType="com.bando.dto.SellpdtDTO">
	   SELECT responsibility, ph_number, sell_date, sell_quantity, sell_length, sell_weight, sell_price, tax, sell_pdt, sell_EAprice
	   		FROM sell_product
	   		WHERE client_id = #{client_id}
   </select> 
 
 
<!-- 매칭된 값의 판매 정보 조회 -->  
<select id="sellAlldata" parameterType="map" resultType="com.bando.dto.SellAllDataDTO">
    <!-- SELECT cc.client_company, cc.address, cc.comp_number, cc.email, mt.machine_id, mt.machine_name, mt.machine_memo, sp.sell_date, sp.responsibility, sp.ph_number, sp.sell_quantity, sp.sell_length, sp.sell_weight, sp.sell_price, sp.tax, sp.sell_pdt, sp.resp_id
	    FROM clientcomp_table cc
	    JOIN machine_table mt ON cc.client_id = mt.client_id
	    JOIN sell_product sp ON mt.machine_id = sp.machine_id
	    WHERE cc.client_id = #{client_id} AND mt.machine_id = #{machine_id} -->
    
    
			    SELECT MP.client_company, 
			       MP.address, 
			       MP.comp_number, 
			       MP.email, 
			       MP.machine_id, 
			       MP.machine_name, 
			       MP.machine_memo, 
			       MP.sell_date, 
			       MP.responsibility, 
			       MP.ph_number, 
			       MP.sell_quantity, 
			       MP.sell_length, 
			       MP.sell_weight, 
			       MP.sell_price, 
			       MP.tax, 
			       MP.sell_pdt, 
			       MP.resp_id,
			       MP.sell_EAprice
			FROM (
			    SELECT cc.client_company, 
			           cc.address, 
			           cc.comp_number, 
			           cc.email, 
			           mt.machine_id, 
			           mt.machine_name, 
			           mt.machine_memo, 
			           sp.sell_date, 
			           sp.responsibility, 
			           sp.ph_number, 
			           sp.sell_quantity, 
			           sp.sell_length, 
			           sp.sell_weight, 
			           sp.sell_price, 
			           sp.tax, 
			           sp.sell_pdt, 
			           sp.resp_id,
			           sp.sell_EAprice,
			           ROW_NUMBER() OVER(ORDER BY sp.resp_id DESC) AS RNUM
			    FROM clientcomp_table cc
			    JOIN machine_table mt ON cc.client_id = mt.client_id
			    JOIN sell_product sp ON mt.machine_id = sp.machine_id
			    WHERE cc.client_id = #{client_id} AND mt.machine_id = #{machine_id}
			) MP
			WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
			ORDER BY MP.resp_id DESC
</select> 
<select id="SelllistCount" resultType="int">
	<![CDATA[
		SELECT COUNT(resp_id)
		  FROM sell_product
		 WHERE resp_id > 0
	]]>
	</select>
	

<!-- 각 구매 관련 테이블의 purchase_id에 매칭된 모든데이터 출력 -->
   <select id="PurChaseMachingDataList" resultType="com.bando.dto.AllPurchaseDataDTO" parameterType="com.bando.dto.Criteria">
	   <!-- SELECT *
		FROM purchasecomp_table pc
		JOIN purchase_table pt ON pc.purchase_id = pt.purchase_id -->
				
				SELECT MP.purchase_id,
		           MP.purchase_company,
		           MP.adress,
		           MP.comp_number,
		           MP.email,
		           MP.pur_quantity,
		           MP.purchase_price,
		           MP.pur_length,
		           MP.pur_weight,
		           MP.product,
		           MP.purchase_date,
		           MP.purchase_pdtnum
		FROM (
		    SELECT pc.purchase_id,
		           pc.purchase_company,
		           pc.adress,
		           pc.comp_number,
		           pc.email,
		           pt.pur_quantity,
		           pt.purchase_price,
		           pt.pur_length,
		           pt.pur_weight,
		           pt.product,
		           pt.purchase_date,
		           pt.purchase_pdtnum,
		           ROW_NUMBER() OVER (ORDER BY pt.purchase_pdtnum DESC) AS RNUM
		    FROM purchasecomp_table pc
		    JOIN purchase_table pt ON pc.purchase_id = pt.purchase_id
		) MP
		WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
		ORDER BY MP.purchase_pdtnum DESC
		
   </select>
	
	
   
<!-- 각 구매 관련 테이블의 client_id및 machine_id에 매칭된 모든데이터 출력 -->
   <select id="SellMachingDataList" resultType="com.bando.dto.AllSellDataDTO" parameterType="com.bando.dto.Criteria">
	   <!-- SELECT cc.client_company, mt.machine_name, sp.*
		FROM clientcomp_table cc
		JOIN machine_table mt ON cc.client_id = mt.client_id
		JOIN sell_product sp ON mt.machine_id = sp.machine_id -->

		SELECT MP.client_company,
         MP.machine_name,
         MP.client_id,
         MP.machine_id,
         MP.responsibility,
         MP.ph_number,
         MP.sell_date,
         MP.sell_quantity,
         MP.sell_length,
         MP.sell_weight,
         MP.sell_price,
         MP.tax,
         MP.sell_pdt,
         MP.resp_id
       FROM(
            SELECT cc.client_company,
                   cc.client_id,
                   mt.machine_id,
                   mt.machine_name,
                   sp.responsibility,
                   sp.ph_number,
                   sp.sell_date,
                   sp.sell_quantity,
                   sp.sell_length,
                   sp.sell_weight,
                   sp.sell_price,
                   sp.tax,
                   sp.sell_pdt,
                   sp.resp_id,
                   ROW_NUMBER() OVER(ORDER BY sp.resp_id DESC) AS RNUM
            FROM clientcomp_table cc
            JOIN machine_table mt ON cc.client_id = mt.client_id
            JOIN sell_product sp ON mt.machine_id = sp.machine_id
       ) MP
         WHERE RNUM BETWEEN #{rowStart} AND #{rowEnd}
         ORDER BY MP.resp_id DESC
   </select>
   
   
<!-- 회사정보 조회 -->
   <select id="PurchCompInfo" resultType="com.bando.dto.PurchaseCompDTO">
	   SELECT purchase_id, purchase_company, adress, comp_number, email
	   		FROM purchasecomp_table
	   		WHERE purchase_id = #{purchase_id} 
   </select>
   

<!-- 구매처 구매정보 수정 -->
<update id="SellDetailUpdate" parameterType="com.bando.dto.PurChasePdtDTO">
    UPDATE purchase_table
    SET Product = #{Product},
        pur_quantity = #{pur_quantity},
        purchase_price = #{purchase_price},
        pur_length = #{pur_length},
        pur_weight = #{pur_weight}
    WHERE purchase_id = #{purchase_id}
</update>


<!-- 고객사 판매정보 수정 -->
<update id="SellAllDataUpdate" parameterType="com.bando.dto.SellAllDataDTO">

		    UPDATE sell_product
		SET 
			responsibility = #{responsibility},
		    sell_quantity = #{sell_quantity},
		    sell_length = #{sell_length},
		    sell_weight = #{sell_weight},
		    sell_price = #{sell_price},
		    tax = #{tax},
		    sell_pdt = #{sell_pdt}
		WHERE 
		    client_id = #{client_id}
		    AND machine_id = #{machine_id}
		    AND resp_id = #{resp_id}
    
</update>

<!-- 구매정보 삭제 -->
   <delete id="PurchaseDataDelete" parameterType="int">
	   DELETE 
			FROM purchase_table
		WHERE purchase_pdtnum = #{purchase_pdtnum}  
	                 
   </delete>
 
 
<!-- 판매정보 삭제 -->
   <delete id="ClientDataDelete" parameterType="int">
	   DELETE 
			FROM sell_product
		WHERE resp_id = #{resp_id}  
	                 
   </delete>

<!-- 재고테이블 조회 -->
   <select id="StockList" resultType="com.bando.dto.StockListDTO">
	   SELECT length, weight, purchase_price, quantity, purchase_company, product, purchase_pdtnum, stock_date, purchase_EAprice
	   		FROM STOCK_TABLE
	        ORDER BY PURCHASE_PDTNUM DESC  
   </select>
   
<!-- 최근에 추가된 구매테이블의 값을 재고테이블에 추가 -->
   <insert id="AddStock">
		INSERT INTO STOCK_TABLE (LENGTH, WEIGHT, PURCHASE_PRICE, QUANTITY, PRODUCT, PURCHASE_PDTNUM, purchase_EAprice, purchase_company)
			SELECT 
			    pur_length AS LENGTH,
			    pur_weight AS WEIGHT,
			    purchase_price AS PURCHASE_PRICE,
			    pur_quantity AS QUANTITY,
			    product AS PRODUCT,
			    purchase_pdtnum AS purchase_pdtnum,
			    purchase_EAprice AS purchase_EAprice,
			    #{PurchaseCompany} AS purchase_company
			FROM purchase_table
			WHERE purchase_pdtnum = (
			    SELECT MAX(purchase_pdtnum)
			    FROM purchase_table
			)
   </insert>
   
   
   
   <!-- purchase_table에 purchase_date을 기준으로 최근에 저장됬던 purchase_price값을 price_table의 allpurchcnt와 합하여 price_table의 allpurchcnt에 값을 저장하는 로직을 구현 -->
   <insert id="allpurchcnt">
   		UPDATE price_table pt
		SET pt.allpurchcnt = (
		    SELECT NVL(pt.allpurchcnt, 0) + NVL(purchase_price, 0) AS total_purch
		    FROM purchase_table
		    WHERE purchase_date = (
		        SELECT MAX(purchase_date) FROM purchase_table
		    )
		)
   </insert>
   
   
   
   <!-- sell_product에 sell_date을 기준으로 최근에 저장됬던 sell_price값을 price_table의 allsellcnt와 합하여 price_table의 allsellcnt에 값을 저장하는 로직을 구현 -->
   <insert id="allsellcnt">
   		UPDATE price_table pt
		SET pt.allsellcnt = (
		    SELECT NVL(pt.allsellcnt, 0) + NVL(sell_price, 0) AS total_sell
		    FROM sell_product
		    WHERE sell_date = (
		        SELECT MAX(sell_date) FROM sell_product
		    )
		)
   </insert>
   
    <!-- 순수익 계산 -->
   <insert id="revenue">
   		UPDATE price_table pt
		SET pt.REVENUE = COALESCE(pt.REVENUE, 0) + (
		    SELECT (sp.SELL_EAPRICE * sp.SELL_QUANTITY) - (st.PURCHASE_EAPRICE * sp.SELL_QUANTITY)
		    FROM sell_product sp
		    JOIN stock_table st ON sp.purchase_pdtnum = st.purchase_pdtnum
		    WHERE sp.purchase_pdtnum = (
		        SELECT MAX(purchase_pdtnum)
		        FROM sell_product
		    )
		    AND sp.sell_date = (
		        SELECT MAX(sell_date)
		        FROM sell_product
		        WHERE purchase_pdtnum = (
		            SELECT MAX(purchase_pdtnum)
		            FROM sell_product
		        )
		    )
		)
   </insert>
   
   
    <!-- 재고수량 카운트 -->
   <insert id="St_Quantity_Cnt">
	    UPDATE stock_table st
		SET st.QUANTITY = (
		    SELECT st.QUANTITY - sp.SELL_QUANTITY
		    FROM sell_product sp
		    WHERE sp.purchase_pdtnum = st.purchase_pdtnum
		    AND sp.purchase_pdtnum = (
		        SELECT MAX(purchase_pdtnum)
		        FROM sell_product
		    )
		    AND sp.sell_date = (
		        SELECT MAX(sell_date)
		        FROM sell_product
		        WHERE purchase_pdtnum = (
		            SELECT MAX(purchase_pdtnum)
		            FROM sell_product
		        )
		    )
		)
	</insert>
	
	<!-- 재고수량이 0일시 재고 열 삭제 -->
   <delete id="DeleteStock" parameterType="int">
	   DELETE FROM stock_table
		WHERE QUANTITY = 0
		AND purchase_pdtnum IN (
		    SELECT purchase_pdtnum
		    FROM stock_table
		    WHERE QUANTITY = 0
		)            
   </delete>
   
   
   <!-- 재고금액 변경 -->
   <insert id="ChangeStockValue">
	    UPDATE price_table pt
		SET pt.Stock_price = (
		    SELECT pt.Stock_price - NVL((sp.sell_quantity * st.purchase_eaprice), 0)
		    FROM sell_product sp
		    JOIN stock_table st ON sp.purchase_pdtnum = st.purchase_pdtnum
		    WHERE sp.sell_date = (
		        SELECT MAX(sell_date)
		        FROM sell_product
		        WHERE purchase_pdtnum = sp.purchase_pdtnum
		    )
		    AND sp.purchase_pdtnum IN (
		        SELECT purchase_pdtnum
		        FROM stock_table
		    )
		)
	</insert>
	
   
   <!-- purchase_table에 purchase_date을 기준으로 최근에 저장됬던 purchase_price값을 price_table의 stock_price와 합하여 price_table의 stock_price에 값을 저장하는 로직을 구현 -->
   <insert id="stock_price">
   		UPDATE price_table pt
		SET pt.stock_price = (
		    SELECT NVL(pt.stock_price, 0) + NVL(purchase_price, 0) AS total_stock_price
		    FROM purchase_table
		    WHERE purchase_date = (
		        SELECT MAX(purchase_date) FROM purchase_table
		    )
		)
   </insert>
   
   
   <!-- sell_product에 sell_date을 기준으로 최근에 저장됬던 tax값을 price_table의 tax와 합하여 price_table의 tax에 값을 저장하는 로직을 구현 -->
   <insert id="tax">
   		UPDATE price_table pt
		SET pt.tax = (
		    SELECT NVL(pt.tax, 0) + NVL(tax, 0) AS total_tax
		    FROM sell_product
		    WHERE sell_date = (
		        SELECT MAX(sell_date) FROM sell_product
		    )
		)
   </insert>
   
   
   <!-- 총액테이블 호출 -->
   <select id="PriceList" resultType="com.bando.dto.PriceDTO">
	   SELECT stock_price, allpurchcnt, allsellcnt, tax, revenue
	   		FROM price_table
   </select>
   
   
   <!-- sell_product테이블의 client_id값에 매칭된 sell_price값들의 합과 tax값들의 합을 각각 조회하는 로직 구현 -->
   <select id="SellPdtById" resultType="com.bando.dto.SellpdtDTO">
	   SELECT 
		    client_id,
		    SUM(sell_price) AS total_sell_price,
		    SUM(tax) AS total_tax
		FROM 
		    sell_product
		WHERE 
		    client_id = #{client_id}
		GROUP BY 
		    client_id
   </select>
   
    <!-- purchase_table테이블의 purchase_id값에 매칭된 purchase_price값들의 합을 조회하는 로직 구현   -->
   <select id="PurChasePdtById" resultType="com.bando.dto.PurChasePdtDTO">
	   SELECT 
		    purchase_id,
		    SUM(purchase_price) AS total_purchase_price
		FROM 
		    purchase_table
		WHERE 
		    purchase_id = #{purchase_id}
		GROUP BY 
		    purchase_id
   </select>
     
</mapper>












