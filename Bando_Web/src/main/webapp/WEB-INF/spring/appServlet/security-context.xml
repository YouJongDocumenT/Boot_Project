<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- 커스텀 로그인 -->
	<!-- 	1) username-parameter : 로그인 페이지에서 입력한 USER(input)에 대한 parameter name.

			생략 시 기본값은 "j_username"
			
			2) password-parameter : 로그인 페이지에서 입력한 PASSWORD(input)에 대한 parameter name.
			
			생략 시 기본값은 "j_password"
			
			3) login-processing-url : 로그인 페이지의 form에서 설정한 전송 주소(form의 action속성).
			
			생략 시 기본값은 "/j_spring_security_check"
			
			4) login-page : Controller로 보낼 로그인 페이지 주소
			
			5) authentication-failrue-url : 로그인 실패 시 이동할 페이지. 아래 소스 코드같은 경우에는 "/login.html" 뒤에 "?ng"를 붙여서 오류 페이지임을 나타낸다. 오류가 나면, login.jsp에서 이 ng를 받아서 해당 오류 메세지를 출력하게 되는 것이다.
			
			6) default-target-url : 로그인에 성공했을 때 보내줄 페이지. 생략 했을 시 사용자의 요청 경로로 이동한다.
			
			 
			
			* logout의 속성 설명
			
			1) logout-url : 로그아웃 요청 주소. 생략 시 기본값은 "/j_spring_security_logout"
			
			2) logout-success-url : 로그아웃 성공 시 이동할 페이지
			
			3) invalidate-session : 세션 삭제 여부
			
			4) delete-cookies : 쿠키 삭제 여부 -->
			
	<s:http auto-config="true" use-expressions="true">
		<s:form-login
			username-parameter="user_id"
			password-parameter="user_pw"
			login-processing-url="/login_check" 
			login-page="/login" 
			authentication-failure-handler-ref="loginFailHandler"
    		authentication-success-handler-ref="loginSuccessHandler"

		/>
		<s:logout 
			logout-url="/security_logout"
			logout-success-url="/main"
			invalidate-session="true"
			delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"
		/>
		
		<s:remember-me key="kimcoder" token-validity-seconds="604800"
			authentication-success-handler-ref="loginSuccessHandler"/>
			
			
		<!-- 사용자가 특정 url 패턴으로 요청을 하면, 여기서 먼저 인증 절차를 거친다. -->
		<!-- s:intercept-url의 pattern이 방금 언급한 특정 url 패턴이고, access에서는 권한을 체크한다. -->
		<s:intercept-url pattern="/vip*" access="hasRole('ROLE_USER')"/>
		<s:intercept-url pattern="/admin*" access="hasRole('ROLE_ADMIN')"/>
		<!-- 마지막으로, s:access-denied-handler는 접근 오류(403) 페이지를 대체할 페이지를 설정할 수 있다. error-page를 "/"로 설정하여 403 page를 home page로 redirect시킨다. -->
		<s:access-denied-handler ref="accessFailHandler"/>
	</s:http>
	
	<bean id="accessFailHandler" class="com.bando.config.AccessFailHandler"/>
	<bean id="loginFailHandler" class="com.bando.config.LoginFailHandler"/>
	<bean id="loginSuccessHandler" class="com.bando.config.LoginSuccessHandler"/>
	
	<!-- ※ access 설명

		s:http의 use-expressions를 true로 설정해야 다음과 같이 메소드 형태로 권한을 체크할 수 있다.
		
		isAnonymous() : 익명일 때만 접근 허용(로그인 상태에서는 접근을 허용하지 않음)
		hasRole('role') : 해당 권한이 있다면 접근 허용
		hasAnyRole('role1', 'role2') : 하나의 권한이라도 가진다면 접근 허용
		isAuthenticated() : 이미 로그인 인증을 받은 User일 경우 접근 허용, 익명 사용자는 로그인 페이지로 이동
		isRememberMe() : 자동 로그인 대상 User일 경우 접근 허용
		isFullyAuthenticated() : 자동 로그인 없이 로그인 인증을 받은 User일 경우 접근 허용
		permitAll : 모두 접근 허용
		denyAll : 모두 접근 미허용 -->
		
	<s:authentication-manager>
		<s:authentication-provider ref="loginAuthenticationProvider"/>
	</s:authentication-manager>
	
	
</beans>